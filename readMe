What is a Data Structure ? 
   * It is a mathematical or logical model of an organizitation of data.In short we can say like, it is a way to organize data in a form that
     is accesible to computer.
   * It allow processing the large amount of data in relatively short period of time.
   * Main purpose of Data Structure is reduce the time and space complexity.
   * An efficient Data Structure use minimum memmory and time to execute.

Types of Data Structure ?
    1)Linear data structure : Linked list, Array, Stack, Queue  - elements arrange in sequential order
    2)Non-Linear data structure : Tree, Graph - They are organized in a hierarchical or graph-like structure.
    3)Hash based data structure : Hash table, Hash map - These are data structures that use hashing to organize and access data efficiently.

Linked List 
    It is a fundamental data structure in computer science.It mainly allow effient insertion and deletion operation compare to array.
    Access the data in sequential, not contiguos like array.

Types of linked list?
    1)Singly linked list
        A singly linked list is a linear data structure where elements (called nodes) are connected using pointers/links.
        Each node has two parts:
            Data → the actual value (e.g., number, string, etc.)
            Next (pointer) → reference to the next node in the list
    2)doubly linked list 
        A doubly linked list is also a linear data structure,
        Each node has two links instead of one:
            Data → stores the value
            Next pointer → points to the next node
            Prev pointer → points to the previous node
    3)circular linked list
        A circular linked list is a data structure where the last node points back to the first node, forming a closed loop.
            a)Structure: All nodes are connected in a circle, enabling continuous traversal without encountering NULL.
            b)Difference from Regular Linked List: In a regular linked list, the last node points to NULL, whereas in a circular linked list, it points to the first node.
            c)Uses: Ideal for tasks like scheduling and managing playlists, where smooth and repeated.

STACK Data Structure
    A Stack is a linear data structure that follows a particular order in which the operations are performed.
    LIFO (Last In, First Out), This means the last item you put (push) into the stack is the first one you take (pop) out.
        a)New elements are always pushed on top
        b)Removal (pop) also happens only from the top.
        c)This ensures a strict order: last in → first out.
    Application of stack:
        Function Call Management (Call Stack)
        Undo/Redo Operations
        Memory Management
        Browser Navigation (History)


QUEUE DATASTRUCTURE
    Queue is a linear data structure that follows FIFO (First In First Out) Principle, so the first element inserted is the first to be popped out.
    FIFO Principle in Queue:
        FIFO Principle states that the first element added to the Queue will be the first one to be removed or processed. So, Queue is like a line of people waiting to purchase tickets, where the first person in line is the first person served. (i.e. First Come First Serve).
    Queue Operations:
        Enqueue: Adds an element to the end (rear) of the queue. If the queue is full, an overflow error occurs. Time and space O(1)
        Dequeue: Removes the element from the front of the queue. If the queue is empty, an underflow error occurs.   Time and space O(1)
        Peek/Front: Returns the element at the front without removing it.     Time and space O(1)
    Types of Queues : 
        Simple Queue: Simple Queue simply follows FIFO Structure.
        Double-Ended Queue (Deque): In a double-ended queue the insertion and deletion operations, both can be performed from both ends. They are of two types: 
            i) Input Restricted Queue: This is a simple queue. In this type of queue, the input can be taken from only one end but deletion can be done from any of the ends.
            ii)Output Restricted Queue: This is also a simple queue. In this type of queue, the input can be taken from both ends but deletion can be done from only one end.
        Priority Queue: A priority queue is a special queue where the elements are accessed based on the priority assigned to them. They are of two types:
            i)Ascending Priority Queue : :In Ascending Priority Queue, the elements are arranged in increasing order of their priority values. Element with smallest priority value is popped first.
            ii) Descending : In Descending Priority Queue, the elements are arranged in decreasing order of their priority values. Element with largest priority is popped first.

    Applications of Queue Data Structure:
        CPU Task Scheduling
        Disk Scheduling
        Handling Requests in Servers
        Data Buffers

Hash table
    Hashing is a techinque that used in data structure to store and retrive data in a way that allow for quick access.
    Hashing involves maping data into specific index in hashtable(an array of items)using a hash function.It enable fast retieval of data based on its key.
    The great thing about hashing is,we can achive all three operations(search,insert,delete)in constant time complexity O(1).

    Hash function:
        Hash fn accepts the key as string, convert into a hash code using a defined logic and then map into a numeric index that is with in the bound of an array.using the index,store the value.

    Hash table used for:
        Hash table are typicaly implemented where constant time lookup and insertion are required
        Database indexing
        Caches

    3 main operations in Hash table:
        Set to store a key value pair
        Get to retrive a value given its key
        Remove to delete a key value pair
        _hash function to hash the the key. 

//Trees
    It is a data structure in which data is organized hierarchically and linked together. Some Examples are the Binary Search tree, Binary tree, Splay tree, AVL Tree, etc.

        1)Binary tree data structure:
            A Binary Tree Data Structure is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child.
            It is commonly used in computer science for efficient storage and retrieval of data, with various operations such as insertion, deletion, and traversal.

        Representation of a binary tree:
            Each node in binary tree has three part :
                i)Data
                ii)pointer to the left child
                iii)pointer to right child

        Terminologies in Binary Tree:
            i)Nodes: The fundamental part of a binary tree, where each node contains data and link to two child nodes.
            ii)Root: The topmost node in a tree is known as the root node. It has no parent and serves as the starting point for all nodes in the tree.
            iii)Parent Node: A node that has one or more child nodes. In a binary tree, each node can have at most two children.
            iv)Child Node: A node that is a descendant of another node (its parent).
            v)Leaf Node: A node that does not have any children or both children are null.
            vi)Internal Node: A node that has at least one child. This includes all nodes except the leaf nodes
            vii)Depth of a Node: The number of edges from a specific node to the root node. The depth of the root node is zero.
            viii)Height of a Binary Tree: The number of nodes from the deepest leaf node to the root node.
        Operations on binary tree:
            1)Traversal: in Binary Tree involves visiting all the nodes of the binary tree. Tree Traversal algorithms can be classified broadly into two categories, DFS and BFS:
                A)Depth-First Search (DFS) algorithms:  Time :O(n),Space :O(n)
                     DFS explores as far down a branch as possible before backtracking. It is implemented using recursion. The main traversal methods in DFS for binary trees are:
                        i)Preorder Traversal (current-left-right): Visits the node first, then left subtree, then right subtree
                        ii)Inorder Traversal (left-current-right): Visits left subtree, then the node, then the right subtree.
                        iii)Postorder Traversal (left-right-current): Visits left subtree, then right subtree, then the node.
                B)Breadth-First Search (BFS) algorithms:
                    BFS explores all nodes at the present depth before moving on to nodes at the next depth level. It is typically implemented using a queue. BFS in a binary tree is commonly referred to as Level Order Traversal.
            
            2) Search : Searching for a value in a binary tree means looking through the tree to find a node that has that value. Since binary trees do not have a specific order like binary search trees, we typically use any traversal method to search. Please refer Search a node in Binary Tree for details.  Time and Space O(n)
            3)Insertion and Deletion  

        what is bst? (Binary Search Tree)
            When inserting:If the new value < curr.value → go left, Else → go right
            Left subtree contains only smaller values
            Right subtree contains only larger values